import { ElementRef, EventEmitter, OnChanges, Renderer2 } from "@angular/core";
import { DomSanitizer, SafeUrl } from "@angular/platform-browser";
import { QRCodeErrorCorrectionLevel, QRCodeVersion, QRCodeElementType } from "./types";
import * as i0 from "@angular/core";
export declare class QRCodeComponent implements OnChanges {
    private renderer;
    private sanitizer;
    allowEmptyString: boolean;
    colorDark: string;
    colorLight: string;
    cssClass: string;
    elementType: QRCodeElementType;
    errorCorrectionLevel: QRCodeErrorCorrectionLevel;
    imageSrc?: string;
    imageHeight?: number;
    imageWidth?: number;
    margin: number;
    qrdata: string;
    scale: number;
    version?: QRCodeVersion;
    width: number;
    alt?: string;
    ariaLabel?: string;
    title?: string;
    qrCodeURL: EventEmitter<SafeUrl>;
    qrcElement: ElementRef;
    context: CanvasRenderingContext2D | null;
    private centerImage?;
    constructor(renderer: Renderer2, sanitizer: DomSanitizer);
    ngOnChanges(): Promise<void>;
    protected isValidQrCodeText(data: string | null): boolean;
    private toDataURL;
    private toCanvas;
    private toSVG;
    private renderElement;
    private createQRCode;
    emitQRCodeURL(element: HTMLCanvasElement | HTMLImageElement | SVGSVGElement): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<QRCodeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<QRCodeComponent, "qrcode", never, { "allowEmptyString": "allowEmptyString"; "colorDark": "colorDark"; "colorLight": "colorLight"; "cssClass": "cssClass"; "elementType": "elementType"; "errorCorrectionLevel": "errorCorrectionLevel"; "imageSrc": "imageSrc"; "imageHeight": "imageHeight"; "imageWidth": "imageWidth"; "margin": "margin"; "qrdata": "qrdata"; "scale": "scale"; "version": "version"; "width": "width"; "alt": "alt"; "ariaLabel": "ariaLabel"; "title": "title"; }, { "qrCodeURL": "qrCodeURL"; }, never, never, false>;
}
